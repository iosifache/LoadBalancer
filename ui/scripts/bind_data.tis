// Configuration
const REFRESH_TIMEOUT = 3s

// Function that returns the number between two values
function range(start, stop){

    var current = start - 1

    return function(){ 
        if(++current <= stop)
            return current
    }

}

// Function that gets datas from C++ and binds them to view
function get_load_balancer_status(){

    // Get the load balancer infos from C++
    var load_balancer_infos = view.GetLoadBalancerInfos().split(" / ")

    // Parse the serialized string
    var number_of_managed_servers = load_balancer_infos[0]
    var average_load = load_balancer_infos[1]
    var requests_per_seconds = load_balancer_infos[2..]
    var list_elements = requests_per_seconds.map((number) => 
        <div class={"charts__chart chart--hover chart--blue chart--p" + number}>
            <span class="charts__percent">{number}</span>
        </div>
    )

    // Bind them to the view
    $(div#number_of_managed_servers).content(number_of_managed_servers)
    $(div#average_load).content(average_load + "%")
    $(div#chart_list).content(list_elements)

    // Clear table
    $(tbody#stats_per_server).content("")

    // Get the status of each server from C++
    var server_infos
    var max = number_of_managed_servers.toInteger(10)
    for (var i in range(1, max)){
        server_infos = view.GetServerInfo(i).split(" / ")
        var elem = <tr><td>{i}</td><td>{server_infos[0]}</td><td>{server_infos[1]}</td><td>{server_infos[2] + "%"}</td></tr>
        $(tbody#stats_per_server).append(elem)
    }
    
    // Wait 1 second and update
    $(body).timer(REFRESH_TIMEOUT, get_load_balancer_status)

}

// Call
get_load_balancer_status()